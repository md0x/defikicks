/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface GovernorContractInterface extends utils.Interface {
  functions: {
    "alreadyClaimed(bytes32,address)": FunctionFragment;
    "claimReward(bytes32,uint256,bytes32[])": FunctionFragment;
    "clock()": FunctionFragment;
    "dockerImage()": FunctionFragment;
    "emissionPerVote()": FunctionFragment;
    "execute(address[],uint256[],bytes[],bytes32)": FunctionFragment;
    "getLilypadFee()": FunctionFragment;
    "getSpecForProposalId(bytes32)": FunctionFragment;
    "hashProposal(address[],uint256[],bytes[],bytes32)": FunctionFragment;
    "hexStrToBytes(string)": FunctionFragment;
    "jobIdToProposal(uint256)": FunctionFragment;
    "lilypadCancelled(address,uint256,string)": FunctionFragment;
    "lilypadFulfilled(address,uint256,uint8,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "proposalDeadline(bytes32)": FunctionFragment;
    "proposalSnapshot(bytes32)": FunctionFragment;
    "proposals(bytes32)": FunctionFragment;
    "propose(address[],uint256[],bytes[],string)": FunctionFragment;
    "quorumPercentage()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestVoteResolution(bytes32)": FunctionFragment;
    "setDockerImage(string)": FunctionFragment;
    "setEmissionPerVote(uint256)": FunctionFragment;
    "setQuorumPercentage(uint256)": FunctionFragment;
    "setVotingPeriod(uint256)": FunctionFragment;
    "state(bytes32)": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "votingPeriod()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "alreadyClaimed"
      | "claimReward"
      | "clock"
      | "dockerImage"
      | "emissionPerVote"
      | "execute"
      | "getLilypadFee"
      | "getSpecForProposalId"
      | "hashProposal"
      | "hexStrToBytes"
      | "jobIdToProposal"
      | "lilypadCancelled"
      | "lilypadFulfilled"
      | "owner"
      | "proposalDeadline"
      | "proposalSnapshot"
      | "proposals"
      | "propose"
      | "quorumPercentage"
      | "renounceOwnership"
      | "requestVoteResolution"
      | "setDockerImage"
      | "setEmissionPerVote"
      | "setQuorumPercentage"
      | "setVotingPeriod"
      | "state"
      | "token"
      | "transferOwnership"
      | "votingPeriod"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "alreadyClaimed",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "clock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dockerImage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emissionPerVote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLilypadFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSpecForProposalId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashProposal",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hexStrToBytes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "jobIdToProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lilypadCancelled",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lilypadFulfilled",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalDeadline",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalSnapshot",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestVoteResolution",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDockerImage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmissionPerVote",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuorumPercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "state",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "alreadyClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dockerImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emissionPerVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLilypadFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpecForProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hexStrToBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jobIdToProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lilypadCancelled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lilypadFulfilled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestVoteResolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDockerImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmissionPerVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuorumPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;

  events: {
    "ClaimedReward(address,uint256,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProposalCreated(bytes32,address,address[],uint256[],bytes[],uint256,uint256,string,bytes32)": EventFragment;
    "ProposalExecuted(bytes32)": EventFragment;
    "ProposalUpdated(bytes32,bytes32,uint256,uint256,uint256,string)": EventFragment;
    "VoteResolutionRequested(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimedReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteResolutionRequested"): EventFragment;
}

export interface ClaimedRewardEventObject {
  user: string;
  amount: BigNumber;
  proposalId: string;
}
export type ClaimedRewardEvent = TypedEvent<
  [string, BigNumber, string],
  ClaimedRewardEventObject
>;

export type ClaimedRewardEventFilter = TypedEventFilter<ClaimedRewardEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProposalCreatedEventObject {
  proposalId: string;
  proposer: string;
  targets: string[];
  values: BigNumber[];
  calldatas: string[];
  voteStart: BigNumber;
  voteEnd: BigNumber;
  description: string;
  descriptionHash: string;
}
export type ProposalCreatedEvent = TypedEvent<
  [
    string,
    string,
    string[],
    BigNumber[],
    string[],
    BigNumber,
    BigNumber,
    string,
    string
  ],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalExecutedEventObject {
  proposalId: string;
}
export type ProposalExecutedEvent = TypedEvent<
  [string],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface ProposalUpdatedEventObject {
  proposalId: string;
  voteMerkleRoot: string;
  forVotes: BigNumber;
  againstVotes: BigNumber;
  abstainVotes: BigNumber;
  data: string;
}
export type ProposalUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string],
  ProposalUpdatedEventObject
>;

export type ProposalUpdatedEventFilter = TypedEventFilter<ProposalUpdatedEvent>;

export interface VoteResolutionRequestedEventObject {
  proposalId: string;
  bridgeId: BigNumber;
}
export type VoteResolutionRequestedEvent = TypedEvent<
  [string, BigNumber],
  VoteResolutionRequestedEventObject
>;

export type VoteResolutionRequestedEventFilter =
  TypedEventFilter<VoteResolutionRequestedEvent>;

export interface GovernorContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernorContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    alreadyClaimed(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimReward(
      proposalId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clock(overrides?: CallOverrides): Promise<[number]>;

    dockerImage(overrides?: CallOverrides): Promise<[string]>;

    emissionPerVote(overrides?: CallOverrides): Promise<[BigNumber]>;

    execute(
      targets: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      calldatas: PromiseOrValue<BytesLike>[],
      descriptionHash: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLilypadFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSpecForProposalId(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashProposal(
      targets: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      calldatas: PromiseOrValue<BytesLike>[],
      descriptionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hexStrToBytes(
      _hexStr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    jobIdToProposal(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lilypadCancelled(
      _from: PromiseOrValue<string>,
      _jobId: PromiseOrValue<BigNumberish>,
      _errorMsg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lilypadFulfilled(
      _from: PromiseOrValue<string>,
      _jobId: PromiseOrValue<BigNumberish>,
      _resultType: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposalDeadline(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proposalSnapshot(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proposals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ] & {
        voteStart: BigNumber;
        proposer: string;
        voteEnd: BigNumber;
        executed: boolean;
        canceled: boolean;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        abstainVotes: BigNumber;
        bridgeId: BigNumber;
        voteMerkleRoot: string;
        snapshotId: BigNumber;
      }
    >;

    propose(
      targets: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      calldatas: PromiseOrValue<BytesLike>[],
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    quorumPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestVoteResolution(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDockerImage(
      image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEmissionPerVote(
      _emissionPerVote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQuorumPercentage(
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVotingPeriod(
      period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    state(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  alreadyClaimed(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimReward(
    proposalId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clock(overrides?: CallOverrides): Promise<number>;

  dockerImage(overrides?: CallOverrides): Promise<string>;

  emissionPerVote(overrides?: CallOverrides): Promise<BigNumber>;

  execute(
    targets: PromiseOrValue<string>[],
    values: PromiseOrValue<BigNumberish>[],
    calldatas: PromiseOrValue<BytesLike>[],
    descriptionHash: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLilypadFee(overrides?: CallOverrides): Promise<BigNumber>;

  getSpecForProposalId(
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  hashProposal(
    targets: PromiseOrValue<string>[],
    values: PromiseOrValue<BigNumberish>[],
    calldatas: PromiseOrValue<BytesLike>[],
    descriptionHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  hexStrToBytes(
    _hexStr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  jobIdToProposal(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  lilypadCancelled(
    _from: PromiseOrValue<string>,
    _jobId: PromiseOrValue<BigNumberish>,
    _errorMsg: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lilypadFulfilled(
    _from: PromiseOrValue<string>,
    _jobId: PromiseOrValue<BigNumberish>,
    _resultType: PromiseOrValue<BigNumberish>,
    _result: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposalDeadline(
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposalSnapshot(
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposals(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber
    ] & {
      voteStart: BigNumber;
      proposer: string;
      voteEnd: BigNumber;
      executed: boolean;
      canceled: boolean;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      abstainVotes: BigNumber;
      bridgeId: BigNumber;
      voteMerkleRoot: string;
      snapshotId: BigNumber;
    }
  >;

  propose(
    targets: PromiseOrValue<string>[],
    values: PromiseOrValue<BigNumberish>[],
    calldatas: PromiseOrValue<BytesLike>[],
    description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  quorumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestVoteResolution(
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDockerImage(
    image: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEmissionPerVote(
    _emissionPerVote: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQuorumPercentage(
    percentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVotingPeriod(
    period: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  state(
    proposalId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    alreadyClaimed(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimReward(
      proposalId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    clock(overrides?: CallOverrides): Promise<number>;

    dockerImage(overrides?: CallOverrides): Promise<string>;

    emissionPerVote(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      targets: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      calldatas: PromiseOrValue<BytesLike>[],
      descriptionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getLilypadFee(overrides?: CallOverrides): Promise<BigNumber>;

    getSpecForProposalId(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    hashProposal(
      targets: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      calldatas: PromiseOrValue<BytesLike>[],
      descriptionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    hexStrToBytes(
      _hexStr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    jobIdToProposal(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    lilypadCancelled(
      _from: PromiseOrValue<string>,
      _jobId: PromiseOrValue<BigNumberish>,
      _errorMsg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    lilypadFulfilled(
      _from: PromiseOrValue<string>,
      _jobId: PromiseOrValue<BigNumberish>,
      _resultType: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposalDeadline(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalSnapshot(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ] & {
        voteStart: BigNumber;
        proposer: string;
        voteEnd: BigNumber;
        executed: boolean;
        canceled: boolean;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        abstainVotes: BigNumber;
        bridgeId: BigNumber;
        voteMerkleRoot: string;
        snapshotId: BigNumber;
      }
    >;

    propose(
      targets: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      calldatas: PromiseOrValue<BytesLike>[],
      description: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    quorumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestVoteResolution(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDockerImage(
      image: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmissionPerVote(
      _emissionPerVote: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setQuorumPercentage(
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVotingPeriod(
      period: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    state(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ClaimedReward(address,uint256,bytes32)"(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      proposalId?: PromiseOrValue<BytesLike> | null
    ): ClaimedRewardEventFilter;
    ClaimedReward(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      proposalId?: PromiseOrValue<BytesLike> | null
    ): ClaimedRewardEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProposalCreated(bytes32,address,address[],uint256[],bytes[],uint256,uint256,string,bytes32)"(
      proposalId?: PromiseOrValue<BytesLike> | null,
      proposer?: null,
      targets?: null,
      values?: null,
      calldatas?: null,
      voteStart?: null,
      voteEnd?: null,
      description?: null,
      descriptionHash?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      proposalId?: PromiseOrValue<BytesLike> | null,
      proposer?: null,
      targets?: null,
      values?: null,
      calldatas?: null,
      voteStart?: null,
      voteEnd?: null,
      description?: null,
      descriptionHash?: null
    ): ProposalCreatedEventFilter;

    "ProposalExecuted(bytes32)"(
      proposalId?: PromiseOrValue<BytesLike> | null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(
      proposalId?: PromiseOrValue<BytesLike> | null
    ): ProposalExecutedEventFilter;

    "ProposalUpdated(bytes32,bytes32,uint256,uint256,uint256,string)"(
      proposalId?: PromiseOrValue<BytesLike> | null,
      voteMerkleRoot?: null,
      forVotes?: null,
      againstVotes?: null,
      abstainVotes?: null,
      data?: null
    ): ProposalUpdatedEventFilter;
    ProposalUpdated(
      proposalId?: PromiseOrValue<BytesLike> | null,
      voteMerkleRoot?: null,
      forVotes?: null,
      againstVotes?: null,
      abstainVotes?: null,
      data?: null
    ): ProposalUpdatedEventFilter;

    "VoteResolutionRequested(bytes32,uint256)"(
      proposalId?: PromiseOrValue<BytesLike> | null,
      bridgeId?: null
    ): VoteResolutionRequestedEventFilter;
    VoteResolutionRequested(
      proposalId?: PromiseOrValue<BytesLike> | null,
      bridgeId?: null
    ): VoteResolutionRequestedEventFilter;
  };

  estimateGas: {
    alreadyClaimed(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      proposalId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clock(overrides?: CallOverrides): Promise<BigNumber>;

    dockerImage(overrides?: CallOverrides): Promise<BigNumber>;

    emissionPerVote(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      targets: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      calldatas: PromiseOrValue<BytesLike>[],
      descriptionHash: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLilypadFee(overrides?: CallOverrides): Promise<BigNumber>;

    getSpecForProposalId(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashProposal(
      targets: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      calldatas: PromiseOrValue<BytesLike>[],
      descriptionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hexStrToBytes(
      _hexStr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jobIdToProposal(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lilypadCancelled(
      _from: PromiseOrValue<string>,
      _jobId: PromiseOrValue<BigNumberish>,
      _errorMsg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lilypadFulfilled(
      _from: PromiseOrValue<string>,
      _jobId: PromiseOrValue<BigNumberish>,
      _resultType: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposalDeadline(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalSnapshot(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      targets: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      calldatas: PromiseOrValue<BytesLike>[],
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    quorumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestVoteResolution(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDockerImage(
      image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEmissionPerVote(
      _emissionPerVote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQuorumPercentage(
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVotingPeriod(
      period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    state(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    alreadyClaimed(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      proposalId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dockerImage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emissionPerVote(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      targets: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      calldatas: PromiseOrValue<BytesLike>[],
      descriptionHash: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLilypadFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSpecForProposalId(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashProposal(
      targets: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      calldatas: PromiseOrValue<BytesLike>[],
      descriptionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hexStrToBytes(
      _hexStr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobIdToProposal(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lilypadCancelled(
      _from: PromiseOrValue<string>,
      _jobId: PromiseOrValue<BigNumberish>,
      _errorMsg: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lilypadFulfilled(
      _from: PromiseOrValue<string>,
      _jobId: PromiseOrValue<BigNumberish>,
      _resultType: PromiseOrValue<BigNumberish>,
      _result: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalDeadline(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalSnapshot(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      targets: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      calldatas: PromiseOrValue<BytesLike>[],
      description: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    quorumPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestVoteResolution(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDockerImage(
      image: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEmissionPerVote(
      _emissionPerVote: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQuorumPercentage(
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVotingPeriod(
      period: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    state(
      proposalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
